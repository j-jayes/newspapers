---
title: "Information on the newspapers in the KB dataset"
author: "Jonathan Jayes"
date: today
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---


```{python}
#| eval: false
import json

with open('/Users/jonathanjayes/Documents/PhD/newspapers-1/data/intermediate/kb_newspapers_with_years_complete.json') as f:
    data = json.load(f)

# Flatten the data
flattened_data = []

for newspaper in data:
    for year, issues_count in newspaper['issues_by_year'].items():
        if issues_count > 0:
            flattened_data.append({
                'name': newspaper['name'],
                'url': newspaper['url'],
                'total_pages': newspaper['total_pages'],
                'year': int(year),
                'issues_count': issues_count
            })

# Convert to DataFrame
import pandas as pd
df = pd.DataFrame(flattened_data)
# Display the first few rows
df.head()

# show the url of the final item in the dataframe
df.iloc[-1]['url']

# write to excel at /Users/jonathanjayes/Documents/PhD/newspapers-1/data/kb_newspapers_by_year.xlsx
df.to_excel('/Users/jonathanjayes/Documents/PhD/newspapers-1/data/processed/kb_newspapers_by_year.xlsx', index=False)
```


```{r}
#| message: false
#| warning: false


# data is at data/kb_newspapers_with_years_complete.json
# Load necessary libraries
library(tidyverse)
library(readxl)
library(gt)

# Read the data from data/kb_newspapers_by_year.xlsx

df <- read_excel('/Users/jonathanjayes/Documents/PhD/newspapers-1/data/processed/kb_newspapers_by_year.xlsx')

```


Count the number of different papers in the entire dataset, not just the years we are interested in.

```{r}
df %>%
    select(name, total_pages) %>%
    distinct() %>%
    arrange(desc(total_pages)) %>%
    head(20) %>%
    gt() %>% 
    tab_header(
        title = "Largest 20 Papers by Page Count"
    ) %>%
    cols_label(
        name = "Newspaper Name",
        total_pages = "Total Pages"
    ) %>%
    fmt_number(
        columns = c(total_pages),
        decimals = 0
    ) 
```

But we care about the number of issues in our time period, let's say 1850 to 1925.

```{r}
top_20 <- df %>%
    filter(
        year <= 1925,
        year >= 1850
    ) %>%
    group_by(name) %>%
    summarise(total_issues = sum(issues_count)) %>%
    arrange(desc(total_issues)) %>%
    head(20)


top_20 %>% 
    gt() %>%
    tab_header(
        title = "Largest 20 Papers by Issue Count",
        subtitle = "In the period 1850-1925"
    ) %>%
    cols_label(
        name = "Newspaper Name",
        total_issues = "Total Issues"
    ) %>%
    fmt_number(
        columns = c(total_issues),
        decimals = 0
    )

```

Make a plot of the number of newspapers by year

```{r}
df %>%
    filter(
        year <= 1925,
        year >= 1850
    ) %>%
    filter(name %in% top_20$name) %>%
    group_by(name) %>%
    mutate(
        avg_year = mean(year)
    ) %>%
    ungroup() %>%
    mutate(
        name = fct_reorder(name, avg_year)
    ) %>%
    ggplot(aes(x = year, y = name, size = issues_count, colour = issues_count)) +
    geom_point() +
    scale_colour_viridis_c() +
    theme_minimal() +
    labs(
        title = "Newspapers in the dataset",
        subtitle = "Range and number of issues per year for subset\n of 20 newspapers",
        x = "Year",
        y = "Newspaper Name",
        size = "Number of Issues",
        colour = "Number of Issues"
    )
```

Can we collect some more information about the papers that are in the dataset in 1900, including where they are published and if they are national or regional?

```{r}
newspaper_info <- tribble(
    ~name, ~published_in, ~regional_national,
    "Aftonbladet", "Stockholm", "National",
    "Sydsvenska Dagbladet", "Malmö", "Regional",
    "Göteborgs Handels- och Sjöfartstidning", "Göteborg", "Regional/National*",
    "Göteborgs-Posten", "Göteborg", "Regional",
    "Stockholms Dagblad", "Stockholm", "National",
    "Post- och Inrikes Tidningar", "Stockholm", "National",
    "Nya Dagligt Allehanda", "Stockholm", "National",
    "Öresundsposten (Ängelholm : 1847)", "Ängelholm/Helsingborg", "Regional",
    "Svenska Dagbladet", "Stockholm", "National",
    "Norrköpings Tidningar", "Norrköping", "Regional",
    "Sundsvalls Tidning", "Sundsvall", "Regional",
    "Arbetet (1887)", "Malmö", "Regional",
    "Göteborgs Aftonblad (1888)", "Göteborg", "Regional",
    "Norrbottens-Kuriren", "Luleå", "Regional",
    "Smålandsposten", "Växjö", "Regional",
    "Östgöta Correspondenten", "Linköping", "Regional",
    "Kalmar", "Kalmar", "Regional",
    "Kristianstadsbladet", "Kristianstad", "Regional",
    "Norrlandsposten (1837)", "Gävle", "Regional",
    "Härnösandsposten", "Härnösand", "Regional"
)

# Display the tibble
newspaper_info %>%
    gt() %>%
    tab_header(
        title = "Newspaper Information",
        subtitle = "Published location and circulation area"
    ) %>%
    cols_label(
        name = "Newspaper Name",
        published_in = "Published In",
        regional_national = "Regional/National"
    ) 
```



Are there adverts for lediga platser / platssökande? Let's take a baseline year of 1900 to check.

To answer we need to form the URL for the newspaper and year, then check manually if there are any adverts for lediga platser / platssökande.

These are the URLs we can visit to check

```{r}

# append &from=1900-01-01&to=1900-12-31 to the url
df %>% filter(name %in% newspaper_info$name) %>% filter(year == 1900) %>% select(name, url, year) %>% mutate(url = paste0(url, "/search?query=lediga%20platser&from=1900-01-01&to=1900-12-31")) %>% 
    select(name, url) %>% 
    mutate(url = paste0("<a href='", url, "'>", url, "</a>")) %>% 
    gt() %>% 
    cols_label(
        name = "Newspaper Name",
        url = "URL"
    ) %>%
    fmt_markdown(columns = everything()) 
    
```

Here are the results of the spot checks

Aftonbladet: not that I can see

ARBETET: not that I can see

Hernösands-posten: some adverts, not regular place

KALMAR: some adverts, not regular place

KRISTIANSTADSBLADET: yes!

NORRLANDSPOSTEN: some adverts, there is a regular place, not a lot

NYA DAGLIGT ALLEHANDA: yes, regular place

SMÅLANDSPOSTEN: yes, regular place, quite a number

ÖRESUNDSPOSTEN: lots of adverts, regular place

## Digitizing the data

I have made mad progress with how we can digitize the data.

![](result.png)